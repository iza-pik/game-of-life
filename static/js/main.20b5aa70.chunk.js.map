{"version":3,"sources":["components/cell/index.jsx","utils/generateGrid.js","components/button/index.jsx","components/overlay/index.jsx","components/input/index.jsx","components/modal/index.jsx","components/board/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","props","react_default","a","createElement","Object","assign","style","backgroundColor","concat","cellLife","className","generateGrid","width","height","cellSize","arguments","length","undefined","percentageAlive","Array","from","Math","floor","Number","random","Button","children","Overlay","onClick","open","Input","Fragment","label","htmlFor","id","Modal","components_overlay","input","type","round","options","startingAlive","onChange","min","max","step","value","components_button","Board","state","board","_this","modalVisible","minCellAlive","maxCellAlive","minCellDead","maxCellDead","interval","onClickHandler","event","console","log","target","dataset","_event$target$dataset","clickX","x","clickY","y","newBoard","map","row","cell","setState","onChangeOptions","objectSpread","defineProperty","toggleModal","handleStart","paused","generateTick","_this2","this","components_modal","key","components_cell","data-x","data-y","React","Component","App","board_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.20b5aa70.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./cell.css\";\r\n\r\nconst Cell = props => (\r\n  <div\r\n    {...props}\r\n    style={{ backgroundColor: `rgba(200, 100, 100, ${props.cellLife})` }}\r\n    className=\"cell\"\r\n  />\r\n);\r\n\r\nexport default Cell;\r\n","export default function generateGrid(\r\n  width,\r\n  height,\r\n  cellSize = 32,\r\n  percentageAlive\r\n) {\r\n  return Array.from({ length: Math.floor(height / cellSize) }, () =>\r\n    Array.from({ length: Math.floor(width / cellSize) }, () =>\r\n      Number(Math.random() < percentageAlive)\r\n    )\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = props => (\r\n  <button className=\"btn\" {...props}>\r\n    {props.children}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./overlay.css\";\r\n\r\nconst Overlay = props => (\r\n  <div\r\n    onClick={props.onClick}\r\n    className={`overlay${props.open ? \" open\" : \"\"}`}\r\n  >\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default Overlay;\r\n","import React from \"react\";\r\n\r\nconst Input = props => (\r\n  <>\r\n    {props.label && <label htmlFor={props.id}>{props.label}</label>}\r\n    <input {...props} />\r\n  </>\r\n);\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Overlay from \"../overlay\";\r\nimport \"./modal.css\";\r\nimport Button from \"../button\";\r\nimport Input from \"../input\";\r\n\r\nconst Modal = props => (\r\n  <Overlay open={props.open}>\r\n    <div className=\"modal-container\">\r\n      <h2>Settings</h2>\r\n      <div className=\"option\">\r\n        <Input\r\n          type=\"range\"\r\n          label={`Percentage of starting living cells - ${Math.round(\r\n            props.options.startingAlive * 100\r\n          )}%`}\r\n          id=\"startingAlive\"\r\n          onChange={props.onChange}\r\n          min={0}\r\n          max={1}\r\n          step={0.01}\r\n          value={props.options.startingAlive}\r\n        />\r\n      </div>\r\n      <Button onClick={props.onClick}>Stop</Button>\r\n      <Button onClick={props.onClick}>Save</Button>\r\n      <Button onClick={props.onClick}>Reset</Button>\r\n      <Button onClick={props.onClick}>Close</Button>\r\n    </div>\r\n  </Overlay>\r\n);\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport Cell from \"../cell\";\r\nimport \"./board.css\";\r\nimport generateGrid from \"../../utils/generateGrid\";\r\nimport Button from \"../button\";\r\nimport Modal from \"../modal\";\r\n\r\nexport default class Board extends React.Component {\r\n  state = {\r\n    board: generateGrid(this.props.width, this.props.height, 34),\r\n    modalVisible: false,\r\n    options: {\r\n      startingAlive: 0.2,\r\n      minCellAlive: 2,\r\n      maxCellAlive: 3,\r\n      minCellDead: 3,\r\n      maxCellDead: 3,\r\n      interval: 100\r\n    }\r\n  };\r\n  onClickHandler = event => {\r\n    console.log(event.target.dataset);\r\n    const { x: clickX, y: clickY } = event.target.dataset;\r\n    const newBoard = this.state.board.map((row, y) =>\r\n      row.map((cell, x) =>\r\n        x === clickX && y === clickY\r\n          ? Number(!this.state.board[y][x])\r\n          : this.state.board[y][x]\r\n      )\r\n    );\r\n    this.setState({ board: newBoard });\r\n  };\r\n  onChangeOptions = event => {\r\n    this.setState({\r\n      options: {\r\n        ...this.state.options,\r\n        [event.target.id]: event.target.value\r\n      }\r\n    });\r\n  };\r\n  toggleModal = event => {\r\n    this.setState({ modalVisible: !this.state.modalVisible });\r\n  };\r\n\r\n  handleStart = event => {\r\n    this.setState(\r\n      { paused: !this.state.paused },\r\n      !this.state.paused ? () => null : this.generateTick\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <Modal\r\n          open={this.state.modalVisible}\r\n          onClick={this.toggleModal}\r\n          options={this.state.options}\r\n          onChange={this.onChangeOptions}\r\n        />\r\n        <div className=\"board\">\r\n          {this.state.board.map((row, y) => (\r\n            <div key={y} className=\"board-row\">\r\n              {row.map((cellLife, x) => (\r\n                <Cell\r\n                  key={x}\r\n                  data-x={x}\r\n                  data-y={y}\r\n                  onClick={this.onClickHandler}\r\n                  cellLife={cellLife}\r\n                />\r\n              ))}\r\n            </div>\r\n          ))}\r\n          <Button>Start</Button>\r\n          <Button onClick={this.toggleModal}>Settings</Button>\r\n          <Button onClick={this.onClickHandler}>Reset</Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/board\";\n\nfunction App() {\n  return (\n    <div className=\"App-main\">\n      <Board width={800} height={600} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}